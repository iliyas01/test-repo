version: '3'
services:
    nginx:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      container_name: nginx
      build:
        context: nginx
        dockerfile: Dockerfile
      depends_on:
        - comm
        - grafana
        - sock
        - bot-en
        - action
        - redis_que
        - rq_dashboard
      volumes:
        - shared:/etc/tsi/shared
      ports:
        - 80:80

    bot-en:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      container_name: rasa-en
      build:
        context: bot-en
        dockerfile: Dockerfile
        args:
          - BOT_VERSION_EN=${BOT_VERSION_EN}
      environment:
          #same port as bot service
        - POSTGRES_SERVER=${POSTGRES_SERVER}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - ACTION_SERVER=http://nginx/actions/webhook
        - COMM_URL=http://nginx/api
        - REDIS_HOST=redis
        - REDIS_PORT=6379
        - REDIS_USERNAME=${REDIS_USERNAME}
        - REDIS_PASSWORD=${REDIS_PASSWORD}
        
    action:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      image: madanmohan85/tsi:${ACTION_VERSION}
      container_name: action
      environment:
        - COMM_URL=http://nginx/api
        - TSI_URL=${TSI_URL}

    comm:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      container_name: comm
      build: 
        context: comm
      environment:
        # only the version of api might change
        - FB_API_URL=https://graph.facebook.com/v8.0/me/messages 
        - FB_PAGE_ACCESS_TOKEN=${FB_PAGE_ACCESS_TOKEN}        
        - FB_VERIFY_TOKEN=${FB_VERIFY_TOKEN}
        - FB_OTNT_TITLE_EN=${FB_OTNT_TITLE_EN}
        - FB_OTNT_TITLE_ES=${FB_OTNT_TITLE_ES}
        #whatsapp-turnio-credential
        - TURNIO_TOKEN=${TURNIO_TOKEN}
        # - TURNIO_USERNAME=${TURNIO_USERNAME}
        # - TURNIO_PASSWORD=${TURNIO_PASSWORD}
        # WhatsApp-Twillio credential
        - WHATSAPP_API=${WHATSAPP_API}
        - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID} 
        - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
        - TWILIO_NUMBER=${TWILIO_NUMBER}
        - WhatsApp_Button_Message_spanish=${WhatsApp_Button_Message_spanish}
        - WhatsApp_Button_Message_english=${WhatsApp_Button_Message_english}
        #same port as bot service
        - RASA_URL=${RASA_URL}
        - RASA_URL_EN=http://nginx/rasa-en
        - RASA_X_TOKEN=${RASA_X_TOKEN}
        - COMM_URL=http://nginx/api
        - SOCK_URL=http://nginx/sock/api/chats
        - POSTGRES_SERVER=${POSTGRES_SERVER}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - SLACK_API_TOKEN=${SLACK_API_TOKEN}
        # - SLACK_VOLUNTEER_CHANNEL_ID=${SLACK_VOLUNTEER_CHANNEL_ID}
        - SLACK_APP_ID=${SLACK_APP_ID}
        # - NUM_OF_SLACK_MSGS=${NUM_OF_SLACK_MSGS}
        - TSI_URL=${TSI_URL}
        - UWSGI_WORKER=${UWSGI_WORKER}
        - RESUME_TIME=${RESUME_TIME}
        - DEFAULT_THUMBNAIL=${DEFAULT_THUMBNAIL}
        - REDIS_URL=redis
        - REDIS_USERNAME=${REDIS_USERNAME}
        - REDIS_PASSWORD=${REDIS_PASSWORD}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - RASA_X_INSTANCE_ID=${RASA_X_INSTANCE_ID}
        - IS_ACTIVE_DELAY=${IS_ACTIVE_DELAY}
        - RASA_IDEAL_TIME=${RASA_IDEAL_TIME}
        - DOCKER_BUILD_ENV=${DOCKER_BUILD_ENV}
        # - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
  
      depends_on:
        - sock
      volumes:
        - shared:/etc/tsi/shared

    grafana:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      image: grafana/grafana:7.5.5
      container_name: grafana
      volumes:
        - grafana-data:/var/lib/grafana
      environment: # useful for production environment for providing custom url for grafana
        - GF_SERVER_ROOT_URL=http://localhost:3000/analytics/
        - GF_SERVER_SERVE_FROM_SUB_PATH=true
        - GF_DATABASE_TYPE=postgres
        - GF_DATABASE_HOST=${POSTGRES_SERVER}
        - GF_DATABASE_NAME=${POSTGRES_DB}
        - GF_DATABASE_USER=${POSTGRES_USER}
        - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}

    redis:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      build:
        context: redis_conn
      container_name: redis
      hostname: redis
      command: redis-server --requirepass ${REDIS_PASSWORD}
      ports:
        - "6379:6379"

    sock:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      container_name: sock
      build:
        context: sock
      environment:
        COMM_URL: http://nginx/api/user-message/jovensalud
    
    redis_que:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      build:
        context: redis_que
        dockerfile: Dockerfile
      container_name: redis_que
      environment: 
        - COMM_URL=http://nginx/api
        - JOB_DELAY=${JOB_DELAY}
      depends_on:
        - redis
      

    rq_dashboard:
      logging:
        driver: awslogs
        options:
          awslogs-region: us-east-1
          awslogs-group: /ec2/bot-jovensalud-prod
          tag: '{{ with split .ImageName ":" }}{{join . "_"}}{{end}}-{{.ID}}'
      restart: always
      build:
        context: rq_dashboard
        dockerfile: Dockerfile
      container_name: rq_dashboard
      ports:
        - 5555:5555
      depends_on:
        - redis
  
volumes:
  # redis-data:
  grafana-data:
  shared:
